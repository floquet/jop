Seismic Analysis Code Example Programs and Scripts

In ${SACHOME} doc/examples (henceforth ~/examples) is a collection of
programs that use various portions of the sacio and sac libraries in
${SACHOME}/lib/.  The source code for each program in Fortran and/or C
should be documented and the programs usable once compiled.  They are
provided here as reference and a starting point to create your own
programs using the sacio and sac libraries.

~/examples/Makefile compiles and runs programs in the ~/examples
sub-directories.  Makefile demonstrates a way to use the sac-config
helper program to get the location and name of libraries along with
required compile flags.  The command `make clean` executed while in
~/examples will undo the actions of `make`.  For further information
about these examples, see `Using the SAC Libraries` in the SAC Manual.

If one enters `make > make.txt`, all the commands will be ported to
make.txt, which provides a summary of all the commands called by
`make`.

The remainder of this document is a brief overview of the programs and
scripts in ~/examples.

=========================

The following provide examples of the routines described in the SAC
Manual section `SAC Reading and Writing Routines`:

  * Get SAC Header Variables
      - gethvc.c
      - gethvf.f
  * Read a Evenly Spaced SAC file
      - rsac1c.c
      - rsac1f.f
  * Read an Un-Evenly Spaced SAC file
      - rsac2c.c
      - rsac2f.f
  * Write a Evenly Spaced SAC file
      - wsac1c.c
      - wsac1f.f
  * Write a Un-Evenly Spaced SAC file
      - wsac2c.c
      - wsac2f.f
  * Write Another Evenly Spaced SAC file
      - wsac3c.c
      - wsac3f.f
  * Write a 2D SAC file
      - wsac4c.c
      - wsac4f.f
  * Write a collection of SAC files
      - wsac5c.c
      - wsac5f.f

======================

There is a set of sub-directories with programs and input files for
programs discussed in `Using the SAC Libraries`.  (Most of them have
HELP files, which can be accessed within a SAC run or can be found in
the SAC Manual.)  Each sub-directory has a Makefile, so one can do
iterative `clean` and `make` within the sub-directory.

  * Remove the trend (along with the mean) of a data series in memory
    [ Directory: rtrend]
      - rtrendc.c
      - rtrendf.f90
  * Taper the time-series file(s) in memory using the SAC defaults: TYPE HANNING
    WIDTH 5%.  [ Directory: taper ]
      - taperc.c
      - taperf.f90
  * Get the Envelope of a SAC time-series file [ Directory: envelope ]
      - envelopec.c
      - envelopef.f
  * Filter a SAC file [ Directory: filter ]
      - filterc.c
      - filterf.f
  * Cut a time series at specified begin and end times [ Directory: cut]
      - cutc.c
      - cutf.f90
  * Fourier Transform (forward and inverse transforms) [Directory: fft]
      - fftc.c
      - fftf.f90
  * Differentiate a sac file [ Directory: differentiate ]
      - difc.c
      - diff.f90
  * Integrate a sac file [ Directory: integrate ]
      - intc.c
      - intf.f90
  * Remove the mean a sac file [ Directory: rmean ]
      - rmeanc.c
      - rmeanf.f90

===========================

The examples for commands time-shift, interpolate, and convolve and
the routines in directory `create-compare` are written in a different
style from the ones listed above, so ~/examples/Makefile does nothing
for them.  Follow the instructions in the README in each directory.

  * Time-shift a SAC file [ Directory: time_shift ]
      - calls fft (both forward and inverse), rtrend, and taper.  There is
        no time-shift command in SAC, but as of v102.0 there is a macro that can
        do a time-shift: ${SACHOME}/macros/sac-ts.m.
  * Interpolate a SAC file using cubic spline [ Directory: interpolate ]
      - SAC uses a simpler interpolation procedure that in some cases may be
        too simple.
  * Convolve two SAC files [ Directory: convolve ]
      -  Prior to v102.0, CONVOLVE in SAC gave incorrect results if the "pulse"
         file was centered at zero time..  In addition to a self-contained
         program, there is a discussion about different kinds of convolution.
  * Runs SAC to create SAC files that are then compared to the output from
        stand-alone programs. [Directory: create-compare]

============================

Also included are examples of ways to run SAC from different scripting
languages.  Scripts `sac_script.XXX` open SAC, create a seismogram (fg
seismo) and uses lh to get the sac metadata.  Scripts
`sac_script2.*` open SAC, read all the files on disk with filespecs
ending in SAC and, sequentially, for each removes the trend (which
also removes the mean), low-pass filters the data, and writes files
with a new extension.

  * Python
    - sac_script.py
    - sac_script2.py
  * sh/bash Shell
    - sac_script.sh
    - sac_script2.sh
  * csh Shell
    - sac_script.csh
    - sac_script2.csh
  * Perl
    - sac_script.pl
    - sac_script2.pl
